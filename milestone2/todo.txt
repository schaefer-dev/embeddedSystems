Scout:
- (DONE) max speed laut datenblatt fuer motor
- initial position
- 4 photo sensoren + noise (value domain rausfinden)
- Minimalstrategie implementieren

Collector:
- (DONE) max speed laut datenblatt fuer motor
- initial position
- 3 Proximity sensoren + noise (value domain rausfinden)
- Minimalstrategie implementieren
- gegner pushen, scount ignorieren wenn am pushen
- darf nicht team mate out of bounds pushen

Referee:
- communication bit/byte-wise, message size, ack, timing laut RF
- 5% chance of losing message (every comminunication)
- Bounding box und ouf bounds check
- (DONE)berechnet punktestand (jede sekunde kuken wer im licht (vom God) ist und drauf addieren)
- (DONE)gibt aktuelle position und winkel an jeden roboter alle x zeitintervalle

God:
- Licht (pattern und random)
- Generates sensor readings basiernd auf den realen position (inkl noise) der anderen spieler
- Addiert noise auf sensorsignals und sendet es zu den robotern
- drift/noise für jeden spieler (bekommt motor signale von den
Roboter, addiert noise und berechnet mit eigenem Diff drive die wirkliche
Position)
- Gibt wirkliche position zu jedem Zeitpunkt zum Referee weiter
- managet Kollisionen

Colliosion zunächst nur vereinfacht durch einfaches wegschieben der
Gegner modellieren.

Step 1: Bis Dienstag 08.05
Daniel: RF Modul ankuken, Motor input value range, sensor value domain (photo, proximity)
Rafi: Konzept Schnittstellen
Kev: Diff drive und roboter als datei/modul, tcp communication

Step 2: Bis Mittwoch 09.05
Daniel: Roboter, random fahren und off switch wenn God sagt stehen bleiben. Robots.
Rafi: Punkstand berechnen. Referee.
Kev: Visualisierung fertig machen. Licht. God.

Step 3: Bis Donnerstag 10.05
	- Collector dreht sich manchmal um die falsche seite (also z.B. 300 grad rechts rum statt 60 grad links rum)
		Und in seltenen Fällen dreht er sich ewig nach links und rechts und links und rechts etc etc.
Daniel:	- Eigener Collector random fahren und wenn harvest position kommt dahin fahren. Collector A.
		Existierendes Opponent modell erweitern durch die Funktionalität zu der Harvest position zu fahren 
		(Position als Input). Modell dann 2 mal referenzieren, beim eigenen Collector sendet der Scout die
		position an diesen Input und beim Gegner bleibt der input einfach leer. Dadurch brauchen wir nur 
		ein referenced model für beide Collectoren.
		Wenn man in model.slx auf opponent klickt dann öffnet er das referenz modell und egal auf welches man 
		klickt werden darin die daten von nur einer der beiden Instanzen der letzten Simulation angezeigt.
		Die Daten welcher Instanz angezeigt werden kann man ändern in Visibility Options.
		In the Simulink Editor, select the Diagram > Subsystem & Model Reference > Model Block Normal Mode Visibility
		https://de.mathworks.com/help/simulink/ug/simulate-models-with-multiple-referenced-model-instances-1.html#bvaxabx
Rafi:	- Punkstand berechnen. Referee.
	- Referee Kommunikation. Referee.
	- Out of bounds check. Referee.
Kev: 	- Gegner Scouts implementieren. Scout B.
	- Licht. Gott aufräumen. God.
	- Unity als exe und hochladen.
	
	
